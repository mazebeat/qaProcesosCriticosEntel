{
    "php": {
        "classes": {
            "App": {
                "functions": {
                    "bindInstallPaths": "($paths)",
                    "getBootstrapFile": "()",
                    "startExceptionHandling": "()",
                    "environment": "()",
                    "isLocal": "()",
                    "detectEnvironment": "($envs)",
                    "runningInConsole": "()",
                    "runningUnitTests": "()",
                    "forceRegister": "($provider, $options = array())",
                    "register": "($provider, $options = array(), $force = false)",
                    "getRegistered": "($provider)",
                    "resolveProviderClass": "($provider)",
                    "loadDeferredProviders": "()",
                    "registerDeferredProvider": "($provider, $service = null)",
                    "make": "($abstract, $parameters = array())",
                    "bound": "($abstract)",
                    "extend": "($abstract, $closure)",
                    "before": "($callback)",
                    "after": "($callback)",
                    "finish": "($callback)",
                    "shutdown": "($callback = null)",
                    "useArraySessions": "($callback)",
                    "isBooted": "()",
                    "boot": "()",
                    "booting": "($callback)",
                    "booted": "($callback)",
                    "run": "($request = null)",
                    "middleware": "($class, $parameters = array())",
                    "forgetMiddleware": "($class)",
                    "handle": "($request, $type = 1, $catch = true)",
                    "dispatch": "($request)",
                    "terminate": "($request, $response)",
                    "callFinishCallbacks": "($request, $response)",
                    "prepareRequest": "($request)",
                    "prepareResponse": "($value)",
                    "readyForResponses": "()",
                    "isDownForMaintenance": "()",
                    "down": "($callback)",
                    "abort": "($code, $message = '', $headers = array())",
                    "missing": "($callback)",
                    "error": "($callback)",
                    "pushError": "($callback)",
                    "fatal": "($callback)",
                    "getConfigLoader": "()",
                    "getEnvironmentVariablesLoader": "()",
                    "getProviderRepository": "()",
                    "getLoadedProviders": "()",
                    "setDeferredServices": "($services)",
                    "isDeferredService": "($service)",
                    "requestClass": "($class = null)",
                    "setRequestForConsoleEnvironment": "()",
                    "onRequest": "($method, $parameters = array())",
                    "getLocale": "()",
                    "setLocale": "($locale)",
                    "registerCoreContainerAliases": "()",
                    "resolved": "($abstract)",
                    "isAlias": "($name)",
                    "bind": "($abstract, $concrete = null, $shared = false)",
                    "bindIf": "($abstract, $concrete = null, $shared = false)",
                    "singleton": "($abstract, $concrete = null)",
                    "share": "($closure)",
                    "bindShared": "($abstract, $closure)",
                    "instance": "($abstract, $instance)",
                    "alias": "($abstract, $alias)",
                    "rebinding": "($abstract, $callback)",
                    "refresh": "($abstract, $target, $method)",
                    "build": "($concrete, $parameters = array())",
                    "resolving": "($abstract, $callback)",
                    "resolvingAny": "($callback)",
                    "isShared": "($abstract)",
                    "getBindings": "()",
                    "forgetInstance": "($abstract)",
                    "forgetInstances": "()",
                    "offsetExists": "($key)",
                    "offsetGet": "($key)",
                    "offsetSet": "($key, $value)",
                    "offsetUnset": "($key)"
                }
            },
            "Artisan": {
                "functions": {
                    "start": "($app)",
                    "make": "($app)",
                    "boot": "()",
                    "call": "($command, $parameters = array(), $output = null)",
                    "add": "($command)",
                    "resolve": "($command)",
                    "resolveCommands": "($commands)",
                    "renderException": "($e, $output)",
                    "setExceptionHandler": "($handler)",
                    "setLaravel": "($laravel)",
                    "setAutoExit": "($boolean)",
                    "setDispatcher": "($dispatcher)",
                    "run": "($input = null, $output = null)",
                    "doRun": "($input, $output)",
                    "setHelperSet": "($helperSet)",
                    "getHelperSet": "()",
                    "setDefinition": "($definition)",
                    "getDefinition": "()",
                    "getHelp": "()",
                    "setCatchExceptions": "($boolean)",
                    "getName": "()",
                    "setName": "($name)",
                    "getVersion": "()",
                    "setVersion": "($version)",
                    "getLongVersion": "()",
                    "register": "($name)",
                    "addCommands": "($commands)",
                    "get": "($name)",
                    "has": "($name)",
                    "getNamespaces": "()",
                    "findNamespace": "($namespace)",
                    "find": "($name)",
                    "all": "($namespace = null)",
                    "getAbbreviations": "($names)",
                    "asText": "($namespace = null, $raw = false)",
                    "asXml": "($namespace = null, $asDom = false)",
                    "getTerminalDimensions": "()",
                    "setTerminalDimensions": "($width, $height)",
                    "extractNamespace": "($name, $limit = null)",
                    "setDefaultCommand": "($commandName)"
                }
            },
            "Auth": {
                "functions": {
                    "createDatabaseDriver": "()",
                    "createEloquentDriver": "()",
                    "getDefaultDriver": "()",
                    "setDefaultDriver": "($name)",
                    "driver": "($driver = null)",
                    "extend": "($driver, $callback)",
                    "getDrivers": "()",
                    "check": "()",
                    "guest": "()",
                    "user": "()",
                    "id": "()",
                    "once": "($credentials = array())",
                    "validate": "($credentials = array())",
                    "basic": "($field = 'email', $request = null)",
                    "onceBasic": "($field = 'email', $request = null)",
                    "attempt": "($credentials = array(), $remember = false, $login = true)",
                    "attempting": "($callback)",
                    "login": "($user, $remember = false)",
                    "loginUsingId": "($id, $remember = false)",
                    "onceUsingId": "($id)",
                    "logout": "()",
                    "getCookieJar": "()",
                    "setCookieJar": "($cookie)",
                    "getDispatcher": "()",
                    "setDispatcher": "($events)",
                    "getSession": "()",
                    "getProvider": "()",
                    "setProvider": "($provider)",
                    "getUser": "()",
                    "setUser": "($user)",
                    "getRequest": "()",
                    "setRequest": "($request)",
                    "getLastAttempted": "()",
                    "getName": "()",
                    "getRecallerName": "()",
                    "viaRemember": "()"
                }
            },
            "Blade": {
                "functions": {
                    "compile": "($path = null)",
                    "getPath": "()",
                    "setPath": "($path)",
                    "compileString": "($value)",
                    "compileEchoDefaults": "($value)",
                    "extend": "($compiler)",
                    "createMatcher": "($function)",
                    "createOpenMatcher": "($function)",
                    "createPlainMatcher": "($function)",
                    "setContentTags": "($openTag, $closeTag, $escaped = false)",
                    "setEscapedContentTags": "($openTag, $closeTag)",
                    "getContentTags": "()",
                    "getEscapedContentTags": "()",
                    "getCompiledPath": "($path)",
                    "isExpired": "($path)"
                }
            },
            "Cache": {
                "functions": {
                    "getPrefix": "()",
                    "setPrefix": "($name)",
                    "getDefaultDriver": "()",
                    "setDefaultDriver": "($name)",
                    "driver": "($driver = null)",
                    "extend": "($driver, $callback)",
                    "getDrivers": "()",
                    "has": "($key)",
                    "get": "($key, $default = null)",
                    "pull": "($key, $default = null)",
                    "put": "($key, $value, $minutes)",
                    "add": "($key, $value, $minutes)",
                    "remember": "($key, $minutes, $callback)",
                    "sear": "($key, $callback)",
                    "rememberForever": "($key, $callback)",
                    "getDefaultCacheTime": "()",
                    "setDefaultCacheTime": "($minutes)",
                    "getStore": "()",
                    "offsetExists": "($key)",
                    "offsetGet": "($key)",
                    "offsetSet": "($key, $value)",
                    "offsetUnset": "($key)",
                    "macro": "($name, $macro)",
                    "hasMacro": "($name)",
                    "macroCall": "($method, $parameters)",
                    "increment": "($key, $value = 1)",
                    "decrement": "($key, $value = 1)",
                    "forever": "($key, $value)",
                    "forget": "($key)",
                    "flush": "()",
                    "getFilesystem": "()",
                    "getDirectory": "()"
                }
            },
            "Carbon": {
                "functions": {}
            },
            "ClassLoader": {
                "functions": {}
            },
            "Config": {
                "functions": {
                    "has": "($key)",
                    "hasGroup": "($key)",
                    "get": "($key, $default = null)",
                    "set": "($key, $value)",
                    "package": "($package, $hint, $namespace = null)",
                    "afterLoading": "($namespace, $callback)",
                    "addNamespace": "($namespace, $hint)",
                    "getNamespaces": "()",
                    "getLoader": "()",
                    "setLoader": "($loader)",
                    "getEnvironment": "()",
                    "getAfterLoadCallbacks": "()",
                    "getItems": "()",
                    "offsetExists": "($key)",
                    "offsetGet": "($key)",
                    "offsetSet": "($key, $value)",
                    "offsetUnset": "($key)",
                    "parseKey": "($key)",
                    "setParsedKey": "($key, $parsed)"
                }
            },
            "Controller": {
                "functions": {}
            },
            "Cookie": {
                "functions": {
                    "make": "($name, $value, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true)",
                    "forever": "($name, $value, $path = null, $domain = null, $secure = false, $httpOnly = true)",
                    "forget": "($name, $path = null, $domain = null)",
                    "hasQueued": "($key)",
                    "queued": "($key, $default = null)",
                    "queue": "()",
                    "unqueue": "($name)",
                    "setDefaultPathAndDomain": "($path, $domain)",
                    "getQueuedCookies": "()"
                }
            },
            "Crypt": {
                "functions": {
                    "encrypt": "($value)",
                    "decrypt": "($payload)",
                    "setKey": "($key)",
                    "setCipher": "($cipher)",
                    "setMode": "($mode)"
                }
            },
            "DB": {
                "functions": {
                    "connection": "($name = null)",
                    "purge": "($name = null)",
                    "disconnect": "($name = null)",
                    "reconnect": "($name = null)",
                    "getDefaultConnection": "()",
                    "setDefaultConnection": "($name)",
                    "extend": "($name, $resolver)",
                    "getConnections": "()"
                }
            },
            "Eloquent": {
                "functions": {
                    "findMany": "($id, $columns = array())",
                    "first": "($columns = array())",
                    "firstOrFail": "($columns = array())",
                    "get": "($columns = array())",
                    "pluck": "($column)",
                    "chunk": "($count, $callback)",
                    "lists": "($column, $key = null)",
                    "paginate": "($perPage = null, $columns = array())",
                    "simplePaginate": "($perPage = null, $columns = array())",
                    "onDelete": "($callback)",
                    "getModels": "($columns = array())",
                    "eagerLoadRelations": "($models)",
                    "where": "($column, $operator = null, $value = null, $boolean = 'and')",
                    "orWhere": "($column, $operator = null, $value = null)",
                    "has": "($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)",
                    "doesntHave": "($relation, $boolean = 'and', $callback = null)",
                    "whereHas": "($relation, $callback, $operator = '>=', $count = 1)",
                    "whereDoesntHave": "($relation, $callback = null)",
                    "orHas": "($relation, $operator = '>=', $count = 1)",
                    "orWhereHas": "($relation, $callback, $operator = '>=', $count = 1)",
                    "getQuery": "()",
                    "setQuery": "($query)",
                    "getEagerLoads": "()",
                    "setEagerLoads": "($eagerLoad)",
                    "getModel": "()",
                    "setModel": "($model)",
                    "macro": "($name, $callback)",
                    "getMacro": "($name)",
                    "select": "($columns = array())",
                    "selectRaw": "($expression)",
                    "addSelect": "($column)",
                    "distinct": "()",
                    "from": "($table)",
                    "join": "($table, $one, $operator = null, $two = null, $type = 'inner', $where = false)",
                    "joinWhere": "($table, $one, $operator, $two, $type = 'inner')",
                    "leftJoin": "($table, $first, $operator = null, $second = null)",
                    "leftJoinWhere": "($table, $one, $operator, $two)",
                    "rightJoin": "($table, $first, $operator = null, $second = null)",
                    "rightJoinWhere": "($table, $one, $operator, $two)",
                    "whereRaw": "($sql, $bindings = array(), $boolean = 'and')",
                    "orWhereRaw": "($sql, $bindings = array())",
                    "whereBetween": "($column, $values, $boolean = 'and', $not = false)",
                    "orWhereBetween": "($column, $values)",
                    "whereNotBetween": "($column, $values, $boolean = 'and')",
                    "orWhereNotBetween": "($column, $values)",
                    "whereNested": "($callback, $boolean = 'and')",
                    "addNestedWhereQuery": "($query, $boolean = 'and')",
                    "whereExists": "($callback, $boolean = 'and', $not = false)",
                    "orWhereExists": "($callback, $not = false)",
                    "whereNotExists": "($callback, $boolean = 'and')",
                    "orWhereNotExists": "($callback)",
                    "whereIn": "($column, $values, $boolean = 'and', $not = false)",
                    "orWhereIn": "($column, $values)",
                    "whereNotIn": "($column, $values, $boolean = 'and')",
                    "orWhereNotIn": "($column, $values)",
                    "whereNull": "($column, $boolean = 'and', $not = false)",
                    "orWhereNull": "($column)",
                    "whereNotNull": "($column, $boolean = 'and')",
                    "orWhereNotNull": "($column)",
                    "whereDay": "($column, $operator, $value, $boolean = 'and')",
                    "whereMonth": "($column, $operator, $value, $boolean = 'and')",
                    "whereYear": "($column, $operator, $value, $boolean = 'and')",
                    "dynamicWhere": "($method, $parameters)",
                    "groupBy": "()",
                    "having": "($column, $operator = null, $value = null, $boolean = 'and')",
                    "orHaving": "($column, $operator = null, $value = null)",
                    "havingRaw": "($sql, $bindings = array(), $boolean = 'and')",
                    "orHavingRaw": "($sql, $bindings = array())",
                    "orderBy": "($column, $direction = 'asc')",
                    "latest": "($column = 'created_at')",
                    "oldest": "($column = 'created_at')",
                    "orderByRaw": "($sql, $bindings = array())",
                    "offset": "($value)",
                    "skip": "($value)",
                    "limit": "($value)",
                    "take": "($value)",
                    "forPage": "($page, $perPage = 15)",
                    "union": "($query, $all = false)",
                    "unionAll": "($query)",
                    "lock": "($value = true)",
                    "lockForUpdate": "()",
                    "sharedLock": "()",
                    "toSql": "()",
                    "remember": "($minutes, $key = null)",
                    "rememberForever": "($key = null)",
                    "cacheTags": "($cacheTags)",
                    "cacheDriver": "($cacheDriver)",
                    "getFresh": "($columns = array())",
                    "getCached": "($columns = array())",
                    "getCacheKey": "()",
                    "generateCacheKey": "()",
                    "implode": "($column, $glue = null)",
                    "buildRawPaginator": "($paginator, $results, $perPage)",
                    "getPaginationCount": "()",
                    "exists": "()",
                    "count": "($columns = '*')",
                    "min": "($column)",
                    "max": "($column)",
                    "sum": "($column)",
                    "avg": "($column)",
                    "aggregate": "($function, $columns = array())",
                    "insert": "($values)",
                    "insertGetId": "($values, $sequence = null)",
                    "truncate": "()",
                    "mergeWheres": "($wheres, $bindings)",
                    "raw": "($value)",
                    "getBindings": "()",
                    "getRawBindings": "()",
                    "setBindings": "($bindings, $type = 'where')",
                    "addBinding": "($value, $type = 'where')",
                    "mergeBindings": "($query)",
                    "getProcessor": "()",
                    "getGrammar": "()",
                    "useWritePdo": "()"
                }
            },
            "Event": {
                "functions": {
                    "listen": "($events, $listener, $priority = 0)",
                    "hasListeners": "($eventName)",
                    "queue": "($event, $payload = array())",
                    "subscribe": "($subscriber)",
                    "until": "($event, $payload = array())",
                    "flush": "($event)",
                    "firing": "()",
                    "fire": "($event, $payload = array(), $halt = false)",
                    "getListeners": "($eventName)",
                    "makeListener": "($listener)",
                    "createClassListener": "($listener)",
                    "forget": "($event)",
                    "forgetQueued": "()"
                }
            },
            "File": {
                "functions": {
                    "exists": "($path)",
                    "get": "($path)",
                    "getRequire": "($path)",
                    "requireOnce": "($file)",
                    "put": "($path, $contents)",
                    "prepend": "($path, $data)",
                    "append": "($path, $data)",
                    "delete": "($paths)",
                    "move": "($path, $target)",
                    "copy": "($path, $target)",
                    "name": "($path)",
                    "extension": "($path)",
                    "type": "($path)",
                    "size": "($path)",
                    "lastModified": "($path)",
                    "isDirectory": "($directory)",
                    "isWritable": "($path)",
                    "isFile": "($file)",
                    "glob": "($pattern, $flags = 0)",
                    "files": "($directory)",
                    "allFiles": "($directory)",
                    "directories": "($directory)",
                    "makeDirectory": "($path, $mode = 493, $recursive = false, $force = false)",
                    "copyDirectory": "($directory, $destination, $options = null)",
                    "deleteDirectory": "($directory, $preserve = false)",
                    "cleanDirectory": "($directory)"
                }
            },
            "Form": {
                "functions": {
                    "open": "($options = array())",
                    "model": "($model, $options = array())",
                    "setModel": "($model)",
                    "close": "()",
                    "token": "()",
                    "label": "($name, $value = null, $options = array())",
                    "input": "($type, $name, $value = null, $options = array())",
                    "text": "($name, $value = null, $options = array())",
                    "password": "($name, $options = array())",
                    "hidden": "($name, $value = null, $options = array())",
                    "email": "($name, $value = null, $options = array())",
                    "url": "($name, $value = null, $options = array())",
                    "file": "($name, $options = array())",
                    "textarea": "($name, $value = null, $options = array())",
                    "number": "($name, $value = null, $options = array())",
                    "select": "($name, $list = array(), $selected = null, $options = array())",
                    "selectRange": "($name, $begin, $end, $selected = null, $options = array())",
                    "selectYear": "()",
                    "selectMonth": "($name, $selected = null, $options = array(), $format = '%B')",
                    "getSelectOption": "($display, $value, $selected)",
                    "checkbox": "($name, $value = 1, $checked = null, $options = array())",
                    "radio": "($name, $value = null, $checked = null, $options = array())",
                    "reset": "($value, $attributes = array())",
                    "image": "($url, $name = null, $attributes = array())",
                    "submit": "($value = null, $options = array())",
                    "button": "($value = null, $options = array())",
                    "getIdAttribute": "($name, $attributes)",
                    "getValueAttribute": "($name, $value = null)",
                    "old": "($name)",
                    "oldInputIsEmpty": "()",
                    "getSessionStore": "()",
                    "setSessionStore": "($session)",
                    "macro": "($name, $macro)",
                    "hasMacro": "($name)"
                }
            },
            "Hash": {
                "functions": {
                    "make": "($value, $options = array())",
                    "check": "($value, $hashedValue, $options = array())",
                    "needsRehash": "($hashedValue, $options = array())",
                    "setRounds": "($rounds)"
                }
            },
            "HTML": {
                "functions": {
                    "entities": "($value)",
                    "decode": "($value)",
                    "script": "($url, $attributes = array(), $secure = null)",
                    "style": "($url, $attributes = array(), $secure = null)",
                    "image": "($url, $alt = null, $attributes = array(), $secure = null)",
                    "link": "($url, $title = null, $attributes = array(), $secure = null)",
                    "secureLink": "($url, $title = null, $attributes = array())",
                    "linkAsset": "($url, $title = null, $attributes = array(), $secure = null)",
                    "linkSecureAsset": "($url, $title = null, $attributes = array())",
                    "linkRoute": "($name, $title = null, $parameters = array(), $attributes = array())",
                    "linkAction": "($action, $title = null, $parameters = array(), $attributes = array())",
                    "mailto": "($email, $title = null, $attributes = array())",
                    "email": "($email)",
                    "ol": "($list, $attributes = array())",
                    "ul": "($list, $attributes = array())",
                    "attributes": "($attributes)",
                    "obfuscate": "($value)",
                    "macro": "($name, $macro)",
                    "hasMacro": "($name)"
                }
            },
            "Input": {
                "functions": {
                    "instance": "()",
                    "method": "()",
                    "root": "()",
                    "url": "()",
                    "fullUrl": "()",
                    "path": "()",
                    "decodedPath": "()",
                    "segment": "($index, $default = null)",
                    "segments": "()",
                    "is": "()",
                    "ajax": "()",
                    "secure": "()",
                    "ip": "()",
                    "ips": "()",
                    "exists": "($key)",
                    "has": "($key)",
                    "all": "()",
                    "input": "($key = null, $default = null)",
                    "only": "($keys)",
                    "except": "($keys)",
                    "query": "($key = null, $default = null)",
                    "hasCookie": "($key)",
                    "cookie": "($key = null, $default = null)",
                    "file": "($key = null, $default = null)",
                    "hasFile": "($key)",
                    "header": "($key = null, $default = null)",
                    "server": "($key = null, $default = null)",
                    "old": "($key = null, $default = null)",
                    "flash": "($filter = null, $keys = array())",
                    "flashOnly": "($keys)",
                    "flashExcept": "($keys)",
                    "flush": "()",
                    "merge": "($input)",
                    "replace": "($input)",
                    "json": "($key = null, $default = null)",
                    "isJson": "()",
                    "wantsJson": "()",
                    "format": "($default = 'html')",
                    "createFromBase": "($request)",
                    "session": "()",
                    "initialize": "($query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null)",
                    "createFromGlobals": "()",
                    "create": "($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null)",
                    "setFactory": "($callable)",
                    "duplicate": "($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)",
                    "overrideGlobals": "()",
                    "setTrustedProxies": "($proxies)",
                    "getTrustedProxies": "()",
                    "setTrustedHosts": "($hostPatterns)",
                    "getTrustedHosts": "()",
                    "setTrustedHeaderName": "($key, $value)",
                    "getTrustedHeaderName": "($key)",
                    "normalizeQueryString": "($qs)",
                    "enableHttpMethodParameterOverride": "()",
                    "getHttpMethodParameterOverride": "()",
                    "get": "($key, $default = null, $deep = false)",
                    "getSession": "()",
                    "hasPreviousSession": "()",
                    "hasSession": "()",
                    "setSession": "($session)",
                    "getClientIps": "()",
                    "getClientIp": "()",
                    "getScriptName": "()",
                    "getPathInfo": "()",
                    "getBasePath": "()",
                    "getBaseUrl": "()",
                    "getScheme": "()",
                    "getPort": "()",
                    "getUser": "()",
                    "getPassword": "()",
                    "getUserInfo": "()",
                    "getHttpHost": "()",
                    "getRequestUri": "()",
                    "getSchemeAndHttpHost": "()",
                    "getUri": "()",
                    "getUriForPath": "($path)",
                    "getQueryString": "()",
                    "isSecure": "()",
                    "getHost": "()",
                    "setMethod": "($method)",
                    "getMethod": "()",
                    "getRealMethod": "()",
                    "getMimeType": "($format)",
                    "getFormat": "($mimeType)",
                    "setFormat": "($format, $mimeTypes)",
                    "getRequestFormat": "($default = 'html')",
                    "setRequestFormat": "($format)",
                    "getContentType": "()",
                    "setDefaultLocale": "($locale)",
                    "getDefaultLocale": "()",
                    "setLocale": "($locale)",
                    "getLocale": "()",
                    "isMethod": "($method)",
                    "isMethodSafe": "()",
                    "getContent": "($asResource = false)",
                    "getETags": "()",
                    "isNoCache": "()",
                    "getPreferredLanguage": "($locales = null)",
                    "getLanguages": "()",
                    "getCharsets": "()",
                    "getEncodings": "()",
                    "getAcceptableContentTypes": "()",
                    "isXmlHttpRequest": "()"
                }
            },
            "Lang": {
                "functions": {
                    "has": "($key, $locale = null)",
                    "get": "($key, $replace = array(), $locale = null)",
                    "choice": "($key, $number, $replace = array(), $locale = null)",
                    "trans": "($id, $parameters = array(), $domain = 'messages', $locale = null)",
                    "transChoice": "($id, $number, $parameters = array(), $domain = 'messages', $locale = null)",
                    "load": "($namespace, $group, $locale)",
                    "addNamespace": "($namespace, $hint)",
                    "parseKey": "($key)",
                    "getSelector": "()",
                    "setSelector": "($selector)",
                    "getLoader": "()",
                    "locale": "()",
                    "getLocale": "()",
                    "setLocale": "($locale)",
                    "getFallback": "()",
                    "setFallback": "($fallback)",
                    "setParsedKey": "($key, $parsed)"
                }
            },
            "Log": {
                "functions": {
                    "debug": "($message, $context = array())",
                    "info": "($message, $context = array())",
                    "notice": "($message, $context = array())",
                    "warning": "($message, $context = array())",
                    "error": "($message, $context = array())",
                    "critical": "($message, $context = array())",
                    "alert": "($message, $context = array())",
                    "emergency": "($message, $context = array())",
                    "useFiles": "($path, $level = 'debug')",
                    "useDailyFiles": "($path, $days = 0, $level = 'debug')",
                    "useErrorLog": "($level = 'debug', $messageType = 0)",
                    "listen": "($callback)",
                    "getMonolog": "()",
                    "getEventDispatcher": "()",
                    "setEventDispatcher": "($dispatcher)",
                    "write": "()"
                }
            },
            "Mail": {
                "functions": {
                    "alwaysFrom": "($address, $name = null)",
                    "plain": "($view, $data, $callback)",
                    "send": "($view, $data, $callback)",
                    "queue": "($view, $data, $callback, $queue = null)",
                    "queueOn": "($queue, $view, $data, $callback)",
                    "later": "($delay, $view, $data, $callback, $queue = null)",
                    "laterOn": "($queue, $delay, $view, $data, $callback)",
                    "handleQueuedMessage": "($job, $data)",
                    "pretend": "($value = true)",
                    "isPretending": "()",
                    "getViewFactory": "()",
                    "getSwiftMailer": "()",
                    "failures": "()",
                    "setSwiftMailer": "($swift)",
                    "setLogger": "($logger)",
                    "setQueue": "($queue)",
                    "setContainer": "($container)"
                }
            },
            "Paginator": {
                "functions": {
                    "make": "($items, $total, $perPage = null)",
                    "getPaginationView": "($paginator, $view = null)",
                    "getCurrentPage": "()",
                    "setCurrentPage": "($number)",
                    "getCurrentUrl": "()",
                    "setBaseUrl": "($baseUrl)",
                    "setPageName": "($pageName)",
                    "getPageName": "()",
                    "getViewName": "($view = null)",
                    "setViewName": "($viewName)",
                    "getLocale": "()",
                    "setLocale": "($locale)",
                    "getRequest": "()",
                    "setRequest": "($request)",
                    "getViewFactory": "()",
                    "setViewFactory": "($view)",
                    "getTranslator": "()"
                }
            },
            "Queue": {
                "functions": {
                    "looping": "($callback)",
                    "failing": "($callback)",
                    "stopping": "($callback)",
                    "connected": "($name = null)",
                    "connection": "($name = null)",
                    "extend": "($driver, $resolver)",
                    "addConnector": "($driver, $resolver)",
                    "getDefaultDriver": "()",
                    "setDefaultDriver": "($name)",
                    "getName": "($connection = null)",
                    "isDownForMaintenance": "()",
                    "push": "($job, $data = '', $queue = null)",
                    "pushRaw": "($payload, $queue = null, $options = array())",
                    "later": "($delay, $job, $data = '', $queue = null)",
                    "pop": "($queue = null)",
                    "marshal": "()",
                    "bulk": "($jobs, $data = '', $queue = null)",
                    "getTime": "()",
                    "setContainer": "($container)",
                    "setEncrypter": "($crypt)"
                }
            },
            "Redirect": {
                "functions": {
                    "home": "($status = 302)",
                    "back": "($status = 302, $headers = array())",
                    "refresh": "($status = 302, $headers = array())",
                    "guest": "($path, $status = 302, $headers = array(), $secure = null)",
                    "intended": "($default = '\/', $status = 302, $headers = array(), $secure = null)",
                    "to": "($path, $status = 302, $headers = array(), $secure = null)",
                    "away": "($path, $status = 302, $headers = array())",
                    "secure": "($path, $status = 302, $headers = array())",
                    "route": "($route, $parameters = array(), $status = 302, $headers = array())",
                    "action": "($action, $parameters = array(), $status = 302, $headers = array())",
                    "getUrlGenerator": "()",
                    "setSession": "($session)"
                }
            },
            "Redis": {
                "functions": {
                    "connection": "($name = 'default')",
                    "command": "($method, $parameters = array())"
                }
            },
            "Request": {
                "functions": {
                    "instance": "()",
                    "method": "()",
                    "root": "()",
                    "url": "()",
                    "fullUrl": "()",
                    "path": "()",
                    "decodedPath": "()",
                    "segment": "($index, $default = null)",
                    "segments": "()",
                    "is": "()",
                    "ajax": "()",
                    "secure": "()",
                    "ip": "()",
                    "ips": "()",
                    "exists": "($key)",
                    "has": "($key)",
                    "all": "()",
                    "input": "($key = null, $default = null)",
                    "only": "($keys)",
                    "except": "($keys)",
                    "query": "($key = null, $default = null)",
                    "hasCookie": "($key)",
                    "cookie": "($key = null, $default = null)",
                    "file": "($key = null, $default = null)",
                    "hasFile": "($key)",
                    "header": "($key = null, $default = null)",
                    "server": "($key = null, $default = null)",
                    "old": "($key = null, $default = null)",
                    "flash": "($filter = null, $keys = array())",
                    "flashOnly": "($keys)",
                    "flashExcept": "($keys)",
                    "flush": "()",
                    "merge": "($input)",
                    "replace": "($input)",
                    "json": "($key = null, $default = null)",
                    "isJson": "()",
                    "wantsJson": "()",
                    "format": "($default = 'html')",
                    "createFromBase": "($request)",
                    "session": "()",
                    "initialize": "($query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null)",
                    "createFromGlobals": "()",
                    "create": "($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null)",
                    "setFactory": "($callable)",
                    "duplicate": "($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)",
                    "overrideGlobals": "()",
                    "setTrustedProxies": "($proxies)",
                    "getTrustedProxies": "()",
                    "setTrustedHosts": "($hostPatterns)",
                    "getTrustedHosts": "()",
                    "setTrustedHeaderName": "($key, $value)",
                    "getTrustedHeaderName": "($key)",
                    "normalizeQueryString": "($qs)",
                    "enableHttpMethodParameterOverride": "()",
                    "getHttpMethodParameterOverride": "()",
                    "get": "($key, $default = null, $deep = false)",
                    "getSession": "()",
                    "hasPreviousSession": "()",
                    "hasSession": "()",
                    "setSession": "($session)",
                    "getClientIps": "()",
                    "getClientIp": "()",
                    "getScriptName": "()",
                    "getPathInfo": "()",
                    "getBasePath": "()",
                    "getBaseUrl": "()",
                    "getScheme": "()",
                    "getPort": "()",
                    "getUser": "()",
                    "getPassword": "()",
                    "getUserInfo": "()",
                    "getHttpHost": "()",
                    "getRequestUri": "()",
                    "getSchemeAndHttpHost": "()",
                    "getUri": "()",
                    "getUriForPath": "($path)",
                    "getQueryString": "()",
                    "isSecure": "()",
                    "getHost": "()",
                    "setMethod": "($method)",
                    "getMethod": "()",
                    "getRealMethod": "()",
                    "getMimeType": "($format)",
                    "getFormat": "($mimeType)",
                    "setFormat": "($format, $mimeTypes)",
                    "getRequestFormat": "($default = 'html')",
                    "setRequestFormat": "($format)",
                    "getContentType": "()",
                    "setDefaultLocale": "($locale)",
                    "getDefaultLocale": "()",
                    "setLocale": "($locale)",
                    "getLocale": "()",
                    "isMethod": "($method)",
                    "isMethodSafe": "()",
                    "getContent": "($asResource = false)",
                    "getETags": "()",
                    "isNoCache": "()",
                    "getPreferredLanguage": "($locales = null)",
                    "getLanguages": "()",
                    "getCharsets": "()",
                    "getEncodings": "()",
                    "getAcceptableContentTypes": "()",
                    "isXmlHttpRequest": "()"
                }
            },
            "Response": {
                "functions": {}
            },
            "Route": {
                "functions": {
                    "get": "($uri, $action)",
                    "post": "($uri, $action)",
                    "put": "($uri, $action)",
                    "patch": "($uri, $action)",
                    "delete": "($uri, $action)",
                    "options": "($uri, $action)",
                    "any": "($uri, $action)",
                    "match": "($methods, $uri, $action)",
                    "controllers": "($controllers)",
                    "controller": "($uri, $controller, $names = array())",
                    "resource": "($name, $controller, $options = array())",
                    "getResourceUri": "($resource)",
                    "getResourceWildcard": "($value)",
                    "group": "($attributes, $callback)",
                    "mergeWithLastGroup": "($new)",
                    "mergeGroup": "($new, $old)",
                    "dispatch": "($request)",
                    "dispatchToRoute": "($request)",
                    "matched": "($callback)",
                    "before": "($callback)",
                    "after": "($callback)",
                    "filter": "($name, $callback)",
                    "when": "($pattern, $name, $methods = null)",
                    "whenRegex": "($pattern, $name, $methods = null)",
                    "model": "($key, $class, $callback = null)",
                    "bind": "($key, $binder)",
                    "createClassBinding": "($binding)",
                    "pattern": "($key, $pattern)",
                    "patterns": "($patterns)",
                    "callRouteBefore": "($route, $request)",
                    "findPatternFilters": "($request)",
                    "callRouteAfter": "($route, $request, $response)",
                    "callRouteFilter": "($filter, $parameters, $route, $request, $response = null)",
                    "withoutFilters": "($callback)",
                    "enableFilters": "()",
                    "disableFilters": "()",
                    "input": "($key, $default = null)",
                    "getCurrentRoute": "()",
                    "current": "()",
                    "has": "($name)",
                    "currentRouteName": "()",
                    "is": "()",
                    "currentRouteNamed": "($name)",
                    "currentRouteAction": "()",
                    "uses": "()",
                    "currentRouteUses": "($action)",
                    "getCurrentRequest": "()",
                    "getRoutes": "()",
                    "getControllerDispatcher": "()",
                    "setControllerDispatcher": "($dispatcher)",
                    "getInspector": "()",
                    "getPatterns": "()",
                    "handle": "($request, $type = 1, $catch = true)"
                }
            },
            "Seeder": {
                "functions": {}
            },
            "Session": {
                "functions": {
                    "getSessionConfig": "()",
                    "getDefaultDriver": "()",
                    "setDefaultDriver": "($name)",
                    "driver": "($driver = null)",
                    "extend": "($driver, $callback)",
                    "getDrivers": "()",
                    "start": "()",
                    "getId": "()",
                    "setId": "($id)",
                    "isValidId": "($id)",
                    "getName": "()",
                    "setName": "($name)",
                    "invalidate": "($lifetime = null)",
                    "migrate": "($destroy = false, $lifetime = null)",
                    "regenerate": "($destroy = false)",
                    "save": "()",
                    "ageFlashData": "()",
                    "has": "($name)",
                    "get": "($name, $default = null)",
                    "pull": "($key, $default = null)",
                    "hasOldInput": "($key = null)",
                    "getOldInput": "($key = null, $default = null)",
                    "set": "($name, $value)",
                    "put": "($key, $value = null)",
                    "push": "($key, $value)",
                    "flash": "($key, $value)",
                    "flashInput": "($value)",
                    "reflash": "()",
                    "keep": "($keys = null)",
                    "all": "()",
                    "replace": "($attributes)",
                    "remove": "($name)",
                    "forget": "($key)",
                    "clear": "()",
                    "flush": "()",
                    "isStarted": "()",
                    "registerBag": "($bag)",
                    "getBag": "($name)",
                    "getMetadataBag": "()",
                    "getBagData": "($name)",
                    "token": "()",
                    "getToken": "()",
                    "regenerateToken": "()",
                    "setExists": "($value)",
                    "getHandler": "()",
                    "handlerNeedsRequest": "()",
                    "setRequestOnHandler": "($request)"
                }
            },
            "SSH": {
                "functions": {
                    "into": "($name)",
                    "connection": "($name = null)",
                    "group": "($name)",
                    "multiple": "($names)",
                    "resolve": "($name)",
                    "getDefaultConnection": "()",
                    "setDefaultConnection": "($name)",
                    "define": "($task, $commands)",
                    "task": "($task, $callback = null)",
                    "run": "($commands, $callback = null)",
                    "get": "($remote, $local)",
                    "getString": "($remote)",
                    "put": "($local, $remote)",
                    "putString": "($remote, $contents)",
                    "display": "($line)",
                    "status": "()",
                    "getGateway": "()",
                    "getOutput": "()",
                    "setOutput": "($output)"
                }
            },
            "Str": {
                "functions": {}
            },
            "URL": {
                "functions": {
                    "full": "()",
                    "current": "()",
                    "previous": "()",
                    "to": "($path, $extra = array(), $secure = null)",
                    "secure": "($path, $parameters = array())",
                    "asset": "($path, $secure = null)",
                    "secureAsset": "($path)",
                    "forceSchema": "($schema)",
                    "route": "($name, $parameters = array(), $absolute = true, $route = null)",
                    "action": "($action, $parameters = array(), $absolute = true)",
                    "forceRootUrl": "($root)",
                    "isValidUrl": "($path)",
                    "getRequest": "()",
                    "setRequest": "($request)"
                }
            },
            "Validator": {
                "functions": {
                    "make": "($data, $rules, $messages = array(), $customAttributes = array())",
                    "extend": "($rule, $extension, $message = null)",
                    "extendImplicit": "($rule, $extension, $message = null)",
                    "replacer": "($rule, $replacer)",
                    "resolver": "($resolver)",
                    "getTranslator": "()",
                    "getPresenceVerifier": "()",
                    "setPresenceVerifier": "($presenceVerifier)"
                }
            },
            "View": {
                "functions": {
                    "make": "($view, $data = array(), $mergeData = array())",
                    "of": "($view, $data = array())",
                    "name": "($view, $name)",
                    "alias": "($view, $alias)",
                    "exists": "($view)",
                    "renderEach": "($view, $data, $iterator, $empty = 'raw|')",
                    "getEngineFromPath": "($path)",
                    "share": "($key, $value = null)",
                    "creator": "($views, $callback)",
                    "composers": "($composers)",
                    "composer": "($views, $callback, $priority = null)",
                    "callComposer": "($view)",
                    "callCreator": "($view)",
                    "startSection": "($section, $content = '')",
                    "inject": "($section, $content)",
                    "yieldSection": "()",
                    "stopSection": "($overwrite = false)",
                    "appendSection": "()",
                    "yieldContent": "($section, $default = '')",
                    "flushSections": "()",
                    "flushSectionsIfDoneRendering": "()",
                    "incrementRender": "()",
                    "decrementRender": "()",
                    "doneRendering": "()",
                    "addLocation": "($location)",
                    "addNamespace": "($namespace, $hints)",
                    "prependNamespace": "($namespace, $hints)",
                    "addExtension": "($extension, $engine, $resolver = null)",
                    "getExtensions": "()",
                    "getEngineResolver": "()",
                    "getFinder": "()",
                    "setFinder": "($finder)",
                    "getDispatcher": "()",
                    "setDispatcher": "($events)",
                    "getContainer": "()",
                    "setContainer": "($container)",
                    "shared": "($key, $default = null)",
                    "getShared": "()",
                    "getSections": "()",
                    "getNames": "()"
                }
            },
            "Debugbar": {
                "functions": {
                    "enable": "()",
                    "boot": "()",
                    "shouldCollect": "($name, $default = false)",
                    "startMeasure": "($name, $label = null)",
                    "stopMeasure": "($name)",
                    "addException": "($e)",
                    "getJavascriptRenderer": "($baseUrl = null, $basePath = null)",
                    "modifyResponse": "($request, $response)",
                    "isEnabled": "()",
                    "collect": "()",
                    "injectDebugbar": "($response)",
                    "disable": "()",
                    "addMeasure": "($label, $start, $end)",
                    "measure": "($label, $closure)",
                    "collectConsole": "()",
                    "addMessage": "($message, $label = 'info')",
                    "addCollector": "($collector)",
                    "hasCollector": "($name)",
                    "getCollector": "($name)",
                    "getCollectors": "()",
                    "setRequestIdGenerator": "($generator)",
                    "getRequestIdGenerator": "()",
                    "getCurrentRequestId": "()",
                    "setStorage": "($storage = null)",
                    "getStorage": "()",
                    "isDataPersisted": "()",
                    "setHttpDriver": "($driver)",
                    "getHttpDriver": "()",
                    "getData": "()",
                    "getDataAsHeaders": "($headerName = 'phpdebugbar', $maxHeaderLength = 4096, $maxTotalHeaderLength = 250000)",
                    "sendDataInHeaders": "($useOpenHandler = null, $headerName = 'phpdebugbar', $maxHeaderLength = 4096)",
                    "stackData": "()",
                    "hasStackedData": "()",
                    "getStackedData": "($delete = true)",
                    "setStackDataSessionNamespace": "($ns)",
                    "getStackDataSessionNamespace": "()",
                    "setStackAlwaysUseSessionStorage": "($enabled = true)",
                    "isStackAlwaysUseSessionStorage": "()",
                    "offsetSet": "($key, $value)",
                    "offsetGet": "($key)",
                    "offsetExists": "($key)",
                    "offsetUnset": "($key)"
                }
            },
            "Excel": {
                "functions": {
                    "create": "($filename, $callback = null)",
                    "load": "($file, $callback = null, $encoding = null)",
                    "selectSheets": "($sheets = array())",
                    "selectSheetsByIndex": "($sheets = array())",
                    "batch": "($files, $callback)",
                    "shareView": "($view, $data = array(), $mergeData = array())",
                    "loadView": "($view, $data = array(), $mergeData = array())",
                    "registerFilters": "($filters = array())",
                    "filter": "($filter, $class = false)",
                    "getFilters": "($key = false)"
                }
            }
        }
    }
}